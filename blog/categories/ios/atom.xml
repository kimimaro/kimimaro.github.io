<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：ios, | 402]]></title>
  <link href="http://blog.oneboxapp.com/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://blog.oneboxapp.com/"/>
  <updated>2015-09-18T13:35:10+08:00</updated>
  <id>http://blog.oneboxapp.com/</id>
  <author>
    <name><![CDATA[Kimimaro]]></name>
    <email><![CDATA[kimirius@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS富文本组件的实现-CoreText vs TextKit]]></title>
    <link href="http://blog.oneboxapp.com/blog/20150916/iosfu-wen-ben-zu-jian-de-shi-xian-coretext-vs-textkit/"/>
    <updated>2015-09-16T18:00:44+08:00</updated>
    <id>http://blog.oneboxapp.com/blog/20150916/iosfu-wen-ben-zu-jian-de-shi-xian-coretext-vs-textkit</id>
    <content type="html"><![CDATA[<h1 id="ios">iOS富文本实现</h1>

<p> 在iOS7之前，系统展现文字的方式只有UILabel、UITextView这样的简单控件，如果要实现复杂的富文本展现，则需要开发者自己调用CoreText去实现，开发的复杂程度非常大。</p>

<p> iOS7之前最优秀的实现应该是开源项目：<a href="https://github.com/Cocoanetics/DTCoreText">Cocoanetics/DTCoreText</a>，通过解析HTML和CSS文件最终用CoreText绘制。（UIWebView应该不会有人用吧 = .=）基于JavascriptCore应该也可以解析渲染出元素丰富的界面，但是没有HTML和CSS来的直观。</p>

<h1 id="dtcoretext">DTCoreText</h1>
<blockquote>
  <p>有关这个项目bang神的blog写的很赞。</p>
</blockquote>

<ul>
  <li><a href="http://blog.cnbang.net/tech/2630/">iOS富文本组件的实现—DTCoreText源码解析 数据篇 « bang’s blog</a></li>
  <li><a href="http://blog.cnbang.net/tech/2729/">iOS富文本组件的实现—DTCoreText源码解析 渲染篇 « bang’s blog</a></li>
  <li>基于DTCoreText实现的富文本项目Demo演示</li>
</ul>

<h1 id="textkit">TextKit</h1>
<blockquote>
  <p>iOS7上终于等来了TextKit，有关的介绍和吐槽都在这里：</p>
</blockquote>

<ul>
  <li><a href="https://www.objc.io/issues/5-ios7/getting-to-know-textkit/">Getting to Know TextKit · objc.io</a></li>
</ul>

<h1 id="section">总结</h1>
<p> 综合来讲TextKit已经具备了富文本展现的一切必备功能：整段缩进、截断（加省略号）、连字符、对齐、文本样式、文本效果、图片视频附件，但就多媒体附件这一块似乎支持的还没有DTCoreText那么灵活，只能插入固定的类型而不是插入一个View。</p>

]]></content>
  </entry>
  
</feed>
