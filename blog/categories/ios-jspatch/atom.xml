<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：ios,jspatch | 402]]></title>
  <link href="http://blog.oneboxapp.com/blog/categories/ios-jspatch/atom.xml" rel="self"/>
  <link href="http://blog.oneboxapp.com/"/>
  <updated>2015-06-27T12:34:33+08:00</updated>
  <id>http://blog.oneboxapp.com/</id>
  <author>
    <name><![CDATA[Kimimaro]]></name>
    <email><![CDATA[kimirius@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JSPatch与Wax对比分析]]></title>
    <link href="http://blog.oneboxapp.com/blog/20150618/jspatchdui-bi/"/>
    <updated>2015-06-18T19:19:06+08:00</updated>
    <id>http://blog.oneboxapp.com/blog/20150618/jspatchdui-bi</id>
    <content type="html"><![CDATA[<blockquote>
  <p><a href="https://github.com/bang590/JSPatch">JSPatch</a>与<a href="https://github.com/probablycorey/wax">Wax</a>作为iOS平台上两大热更新框架使用不同的语言、基于相同的原理（ObjC动态绑定）一直备受iOS开发者的青睐，Wax出现较早且已经不再维护，但是也有了各种各样的分支版本；JSPatch作为后起之秀得益于iOS7苹果开放了JavascriptCore.framework的API，相比以前的Wax框架有了很多更新，下面就根据以往的开发经验简单比较一下二者的优势劣势，如果想对两个框架有更多的了解，请移步上文的官方网站和相关文档。</p>
</blockquote>

<ol>
  <li>JSPatch相比于Wax的优势</li>
  <li>JSPatch相比于Wax的劣势</li>
</ol>

<hr />

<h1 id="jspatchwax">JSPatch相比于Wax的优势</h1>

<h2 id="section">内存管理</h2>
<ul>
  <li>JSPatch中JSValue负责维护被引用OC对象的生命周期，如果JS有变量引用时，这个OC对象引用计数就加1 ，JS变量的引用释放了就减1，如果OC上没别的持有者，这个OC对象的生命周期就跟着JS走了，会在JS进行垃圾回收时释放。</li>
  <li>Wax在引用OC对象需要打上waxRetain标记，然后跑一个定时的GC查看这个对象的retainCount，当发现一个不再需要引用的对象retainCount大于1并且waxRetain为YES时（实际上的判断逻辑要复杂一些），就释放这个对象。依赖于retainCount，苹果官方是不推荐的，也不安全。</li>
</ul>

<h2 id="section-1">类型转换</h2>
<ul>
  <li>
    <p>JSPatch使用的是系统提供的类型转换，JSValue类内部可以看到完整的JS类型与OC的映射关系，同时支持NSArray和NSDictionary等类型的嵌套解析;</p>

    <pre><code>  @textblock
     Objective-C type  |   JavaScript type
   --------------------+---------------------
           nil         |     undefined
          NSNull       |        null
         NSString      |       string
         NSNumber      |   number, boolean
       NSDictionary    |   Object object
         NSArray       |    Array object
          NSDate       |     Date object
         NSBlock (1)   |   Function object (1)
            id (2)     |   Wrapper object (2)
          Class (3)    | Constructor object (3)
  @/textblock
</code></pre>
  </li>
  <li>
    <p>Lua中调用OC对象需要使用toobjc方法，否则会Crash，还有一个问题是NSDictionary、NSArray使用时是被copy的，也就是说你无法直接更改OC内存中的那个对象。</p>
  </li>
</ul>

<h2 id="section-2">多线程</h2>
<ul>
  <li>由于JSCore的支持，JS脚本实现的方法在多线程中调用没有任何问题，同时JSPatch也针对GCD提供了封装；</li>
  <li>Lua语言本身是不支持多线程的，多个线程同时调用Lua就等于同时操作同一张Lua元表，可能出问题；同时Wax调用异步的话只能依赖performSelectorInBackground:了。</li>
</ul>

<h2 id="block">Block</h2>
<ul>
  <li>JSPatch：天然支持，JS的Function类型会对应转换成NSBlock执行；</li>
  <li>个人认为Wax最受诟病的一点，无法支持Block使得方法替换和扩展都受到很大限制。</li>
</ul>

<h2 id="section-3">类型扩展</h2>
<ul>
  <li>JSPatch提供了CGRect、CGPoint、NSRange支持</li>
  <li>Lua调用OC对象时需要toobjc，NSDictionary、NSArray只支持copy，不支持retain</li>
</ul>

<h2 id="section-4">参数传递</h2>
<blockquote>
  <p>为了替换方法实现，将方法传递到脚本语言的实现过程中必须知道当前方法的参数类型列表，传统的方法是用va_list得到，但是arm64上va_list的实现更改无法根据内存位置取出参数，对于这个坑也是困了好久才解决。但是个人认为bang牛给了一个更好的解法。</p>
</blockquote>

<ul>
  <li>JSPatch为了解决arm64上va_list拿不到参数的问题，使用forwardInvocation方式，支持各种类型参数枚举；</li>
  <li>Wax框架维护期间还没有出现arm64所以也就一直平静的使用va_list，当然现在升级的话也可以使用JSPatch的这种方式；</li>
</ul>

<h1 id="jspatchwax-1">JSPatch相比于Wax的劣势</h1>

<h2 id="section-5">消息转发</h2>
<ul>
  <li>JS语言不支持消息转发，对于一个对象如果不响应方法就直接崩溃了，所以bang牛用正则替换了方法调用，然后通过桥接方法 __c() 来实现；</li>
  <li>Lua解析后的方法、变量都放到元表中，支持消息转发，算是一个非常好的特性。</li>
</ul>

<h2 id="ios6">iOS6支持</h2>
<ul>
  <li>JSPatch基于JSCore，仅支持iOS7+</li>
  <li>Wax理论上支持所有iOS版本。</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSPatch初探]]></title>
    <link href="http://blog.oneboxapp.com/blog/20150618/jspatchchu-tan/"/>
    <updated>2015-06-18T11:56:50+08:00</updated>
    <id>http://blog.oneboxapp.com/blog/20150618/jspatchchu-tan</id>
    <content type="html"><![CDATA[<hr />
<ol>
  <li>JSPatch是什么？</li>
  <li>Objective-C动态绑定机制</li>
  <li>JSPatch原理</li>
  <li>JSPatch实用举例</li>
  <li>与现有方案（Wax）的对比</li>
</ol>

<hr />

<blockquote>
  <p><a href="http://blog.cnbang.net/tech/2808/">JSPatch实现原理详解</a></p>
</blockquote>

<h2 id="jspatch">一、JSPatch介绍</h2>
<blockquote>
  <p>最直观的介绍莫过于官方文档</p>
</blockquote>

<ul>
  <li><a href="https://github.com/bang590/JSPatch">bang590/JSPatch</a></li>
  <li>利用OC Runtime桥接Objective-C和JavaScript</li>
  <li>用处：
    <ul>
      <li>添加模块</li>
      <li>修复线上Bug</li>
    </ul>
  </li>
</ul>

<h2 id="oc">二、OC动态绑定机制</h2>
<blockquote>
  <p>一切iOS平台上实现动态BugFix和新增模块的技术都基于ObjC的动态绑定、动态加载、消息转发</p>
</blockquote>

<ul>
  <li>所谓动态绑定就是利用OC Runtime可以做如下几件事情：
    <ul>
      <li>给已有类增加方法</li>
      <li>替换现有类的方法指针，指向新的方法实现</li>
      <li>动态创建一个类</li>
    </ul>
  </li>
  <li>
    <p>【类对象】动态绑定机制源于OC的动态类实现</p>

    <pre><code>      #import &lt;objc/runtime.h&gt;
</code></pre>

    <ul>
      <li>除基本类型外所有OC类都继承于NSObject类</li>
      <li>NSObject对象有一个指向该实例所属类的isa指针</li>
      <li>OC中的类也是一个对象的概念，因此我们可以动态的创建一个类对象</li>
      <li>objc_allocateClassPair</li>
      <li>class_addMethod</li>
      <li>objc_registerClassPair</li>
    </ul>
  </li>
  <li>【消息】方法替换和新增源于消息转发机制
    <ul>
      <li>OC中方法调用起始是一个对象响应消息的过程</li>
      <li>可响应消息列表存在于对象isa指针所指向的类对象上</li>
      <li>objc_msgSend</li>
      <li>forwardInvocation:</li>
    </ul>
  </li>
</ul>

<h2 id="jspatch-1">三、JSPatch原理</h2>
<blockquote>
  <p>通过forwardInvocation方法，将</p>
</blockquote>

]]></content>
  </entry>
  
</feed>
