<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：algorithm | 402]]></title>
  <link href="http://blog.oneboxapp.com/blog/categories/algorithm/atom.xml" rel="self"/>
  <link href="http://blog.oneboxapp.com/"/>
  <updated>2015-10-12T17:05:50+08:00</updated>
  <id>http://blog.oneboxapp.com/</id>
  <author>
    <name><![CDATA[Kimimaro]]></name>
    <email><![CDATA[kimirius@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[有符号定点数的表示方法]]></title>
    <link href="http://blog.oneboxapp.com/blog/20130627/you-fu-hao-ding-dian-shu-de-biao-shi-fang-fa/"/>
    <updated>2013-06-27T11:54:10+08:00</updated>
    <id>http://blog.oneboxapp.com/blog/20130627/you-fu-hao-ding-dian-shu-de-biao-shi-fang-fa</id>
    <content type="html"><![CDATA[<p> 有符号定点数用首位0表示正，1表示负，正数与负数的补码求法不同。</p>

<!--more-->

<ul>
  <li>正数的原码，反码，补码相同（这条要首先牢记，之后才能记住负数反码，补码的求法）；</li>
  <li>负数的反码是除原码符号为外按位求反，负数的补码是对原码按位求反之后加1。
反码的作用不大，主要要记住反码的作用。</li>
</ul>

<p><strong>补码的设计目的是:</strong></p>

<ol>
  <li>使符号位能与有效值部分一起参加运算,从而简化运算规则；</li>
  <li>使减法运算转换为加法运算,进一步简化计算机中运算器的线路设计 。
移码主要应用于浮点数的运算中，有关移码的介绍在网上查了一下居然没有找到，都是些数据结构基础中就介绍的，以后有空要写个总结记录一下。
作为一个小白，我觉得更重要的不是记住上面的运算方法，这些都异常简单，重要的是记住某些特殊值或者规律，这些能帮我们计算的更快，反应的更迅速，感兴趣的朋友可以在下面写出你掌握的规律。</li>
</ol>

<p>比如说：
数值0原码两个，反码两个，补码只有一个；
由上述特点直接衍生出的是补码可以多表示一个数字，若字长为8位，补码中就多了一个-128，补码可以表示256个数；</p>

<hr />
<p>我的理解绝大部分的也运算都应该采用补码形式，具体的原因就很多了；
进行补码运算时，应注意所得结果不应超过补码所能表示数的范围；
在以二进制补码表示负数的机器上，~（按位运算符）10的结果为十进制数-11；
等等。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移位运算符]]></title>
    <link href="http://blog.oneboxapp.com/blog/20130627/yi-wei-yun-suan-fu/"/>
    <updated>2013-06-27T11:50:43+08:00</updated>
    <id>http://blog.oneboxapp.com/blog/20130627/yi-wei-yun-suan-fu</id>
    <content type="html"><![CDATA[<blockquote>
  <p>移位运算先转化成2进制，再根据运算符指定的位数作以为运算。
左移运算符（«）：逻辑/</p>
</blockquote>

<!--more-->

<p>算数移位。在不考虑溢出的情况下，相当于乘2，移位时移出的位数全部丢弃，右侧补入的数全部是0；左移时要注意有符号数的溢出情况。
右移运算符（»）：算术运算，对于无符号数以及有符号正数相当于除2，移位时溢出的位数全部丢弃，补入的数分为两种情况：如果是无符号数，左侧全部补0；如果是有符号数与符号位和编译器有关，一般情况下补符号位的副本。</p>

<hr />
<p>移位计数的取值问题：</p>

<ol>
  <li>
    <p>网上查到的结果是如果移动的位数超过类型的长度时，会对移位计数取余，举个小例子：</p>

    <p>int i = 1, j = 0x80000000; //设int为32位
   i = i « 33;     // 33 % 32 = 1 左移1位,i变成2
   j = j « 33;     // 33 % 32 = 1 左移1位,j变成0,最高位被丢弃</p>
  </li>
  <li>
    <p>《C Traps and Pitfalls》这本书上说的是：移位计数必须大于等于0，而严格小于n（如上例的32位），即：i « 32 和 i«-1这种写法都是非法的，我猜是这本书出版的时间比较早，但是我还是更喜欢这样的做法。</p>
  </li>
</ol>

<p>除法运算代替以为运算，将导致程序运行速度大大减慢。换句话说：使用移位预算符将大大提高程序的执行效率。对于这一点我将在自己以后的应用中继续总结。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[链表（LinkList）的设计与实现（初始化，创建，插入，删除，逆置）]]></title>
    <link href="http://blog.oneboxapp.com/blog/20120627/lian-biao-(linklist)de-she-ji-yu-shi-xian-(chu-shi-hua-,chuang-jian-,cha-ru-,shan-chu-,ni-zhi-)/"/>
    <updated>2012-06-27T12:08:20+08:00</updated>
    <id>http://blog.oneboxapp.com/blog/20120627/lian-biao-(linklist)de-she-ji-yu-shi-xian-(chu-shi-hua-,chuang-jian-,cha-ru-,shan-chu-,ni-zhi-)</id>
    <content type="html"><![CDATA[<p>只是为了自己学习留作记录，需要的朋友可以看看。</p>

<p>修改日志：</p>

<p>version1.1:2011-3-26 1.在尾插法中增加p-&gt;next = NULL;2.将类似于p==NULL改为NULL==p(示范性改正，没有全改);</p>

<pre><code>//////////////////////////////////////
//单链表的表示与实现                //
//Author:YuTianhang               //
//Date:2011.3.23                    //
</code></pre>

<!--more-->

<pre><code>//Version:1.0                        //
//////////////////////////////////////

#include "stdafx.h"

typedef int ElemType;

//定义单链表的结点类型

typedef struct LNode
{
    ElemType data;
    struct LNode *next;
}LNode,*LinkList;

////////////////////////////////////////////////

//单链表的初始化

int InitList(LinkList &amp;L)
{
    L = (LinkList)malloc(sizeof(LNode));    //申请结点空间

    if(NULL == L) printf("申请结点空间失败！\n");    //判断是否有足够的内存空间

    L-&gt;next = NULL;

    return 1;
}

///////////////////////////////////////////////

//头插法创建带头结点的单链表

int CreatList_H(LinkList &amp;L)
{
    L = (LinkList)malloc(sizeof(LNode));    //申请头结点空间
    L-&gt;next = NULL;    //初始化一个空链表

    ElemType e;

    printf("Input:!\n");

    while(scanf("%d",&amp;e) != EOF)
    {
        LNode *p;
        p = (LNode *)malloc(sizeof(LNode));    //建立一个新结点
        p-&gt;data = e;

        p-&gt;next = L-&gt;next;    //头插法插入结点p
        L-&gt;next = p;
    }

    //int i = 5;

    //while(i &gt; 0)
    //{
    //    scanf("%d",&amp;e);
    //   
    //    LNode *p;
    //    p = (LNode *)malloc(sizeof(LNode));    //建立一个新结点
    //    p-&gt;data = e;

    //    p-&gt;next = L-&gt;next;    //头插法插入结点p
    //    L-&gt;next = p;

    //    i--;
    //}

    return 1;
}

////////////////////////////////////////////////////////

//尾插法创建带头结点的链表

int CreatList_T(LinkList &amp;L)
{
    L = (LinkList)malloc(sizeof(LNode));
    L-&gt;next = NULL;

    ElemType e;
    LNode *r;
    r = L;
    while(scanf("%d",&amp;e) != EOF)
    {
        LNode *p;
        p = (LNode *)malloc(sizeof(LNode));
        p-&gt;data = e;

        p-&gt;next = NULL;    //第一次没有付空值，导致输出的时候p的next指针无法确定

        r-&gt;next = p;    //尾插法插入结点p
        r = p;
    }

    return 1;
}

///////////////////////////////////////////////////////

//在单链表的第i个位置插入元素e

int ListInsert(LinkList &amp;L,int i,ElemType e)
{
    LNode *pre;        //pre为i位置的前驱结点
    pre = L;
    while(i &gt; 0)    //查找i位置的前驱结点
    {
        pre = pre-&gt;next;
        --i;
    }

    LNode *p;
    p = (LNode *)malloc(sizeof(LNode));
    p-&gt;data = e;

    p-&gt;next = pre-&gt;next;    //将p结点插入到第i个位置
    pre-&gt;next = p;

    return 1;
}

/////////////////////////////////////////////////////////////

//在单链表中删除第i个结点并用e返回其结点值

int ListDelete(LinkList &amp;L,int i,ElemType &amp;e)
{
    LNode *pre;
    pre = L;

    while(i &gt; 0)
    {
        pre = pre-&gt;next;
        --i;
    }

    LNode *p;
    p = pre-&gt;next;
    e = p-&gt;data;

    pre-&gt;next = p-&gt;next;    //删除第i个位置的结点p
    free(p);

    return 1;
}

/////////////////////////////////////////////////////

//输入单链表的各项

int OutputList(LinkList L)
{
    if(L == NULL) printf("Error!\n");
    LNode *p;
    p = L-&gt;next;

    printf("Kimimaro:\n");
    do
    {
        if(p != L-&gt;next) printf(",");

        printf("%d",p-&gt;data);
        p = p-&gt;next;
    }while(p != NULL);

    printf("\n");

    return 1;
}

//////////////////////////////////////////////////

//单链表的逆置

int InvertList(LinkList &amp;L)
{
    LNode *p,*q,*r;
    p = L-&gt;next-&gt;next;
    q = p-&gt;next;

    r = L-&gt;next;
    r-&gt;next = NULL;

    while(p-&gt;next != NULL)
    {
        p-&gt;next = r;    //头插法插入结点p
        r = p;
        p = q;
        q = p-&gt;next;
    }

    p-&gt;next = r;    //最后一个结点的处理
    L-&gt;next = p;

    //while(p != NULL)                            //错误代码，导致最后两个结点循环？
    //{
    //    p-&gt;next = L-&gt;next;    //头插法插入结点p
    //    L-&gt;next = p;
    //    p = q;
    //    q = p-&gt;next;
    //}

    //p-&gt;next = L-&gt;next;    //最后一个结点的处理
    //L-&gt;next = p;

    return 1;
}

int _tmain(int argc, _TCHAR* argv[])
{
    LinkList L;

    CreatList_H(L);

    OutputList(L);

    int i = 3;
    ElemType e = 22;
    ListInsert(L,i,e);

    OutputList(L);

    /*ListDelete(L,i,e);

    OutputList(L);*/

    InvertList(L);

    OutputList(L);

    char ch;
    ch = getchar();
    return 0;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二分法查找的实现（递归&amp;循环）]]></title>
    <link href="http://blog.oneboxapp.com/blog/20120627/er-fen-fa-cha-zhao-de-shi-xian-(di-gui-and-xun-huan-)/"/>
    <updated>2012-06-27T12:07:27+08:00</updated>
    <id>http://blog.oneboxapp.com/blog/20120627/er-fen-fa-cha-zhao-de-shi-xian-(di-gui-and-xun-huan-)</id>
    <content type="html"><![CDATA[<pre><code>	#include "stdafx.h"
	
	//////////////////////////////////////////
	//二分查找                            //
	//Author:Kimimaro                    //
	//Date:2010-3-28                    //
	/////////////////////////////////////////
</code></pre>

<!--more-->
<pre><code>	typedef int KeyType;    //定义关键字类型
	
	//typedef struct        //定义数据元素结构
	//{
	//    KeyType key;    //关键字域
	//}SElemType;
	
	//宏定义关键字比较操作
	
	#define EQ(a,b) ((a) == (b))
	#define LT(a,b) ((a) &lt;  (b))
	#define LQ(a,b) ((a) &lt;= (b))
	
	//定义表长
	
	#define MAX 5
	
	//----------------静态查找表的顺序存储结构-------------------
	
	typedef struct
	{
	    KeyType *elem;
	    int length;
	}SSTable;
	
	//创建指定长度的静态查找表
	
	int CreatSST(SSTable &amp;S,int n)
	{
	    S.length = n;
	    S.elem = (KeyType*)malloc(S.length*sizeof(KeyType));
	
	    int i = 1;
	
	    while(scanf("%d",&amp;(S.elem[i])) != EOF)
	    {
	        i++;
	    }
	   
	    return 0;
	}
	
	//递归二分查找
	
	int binarySearch(SSTable S,KeyType key,int low,int high)
	{
	    if(low &gt; high) return -1;
	
	    int mid = (low + high) / 2;
	
	    if(EQ(key, S.elem[mid])) return mid;
	    else if(LT(key, S.elem[mid])) binarySearch(S,key,low,mid - 1);
	    else binarySearch(S,key,mid + 1,high);
	}
	
	//循环二分查找
	
	//int binarySearch(SSTable S,KeyType key)
	//{
	//    int low = 1,high = S.length,mid;
	//
	//    while(low &lt;= high)
	//    {
	//        mid = (low + high) / 2;
	//
	//        if(EQ(key,mid)) return mid;
	//        else if(LT(key,mid)) high = mid - 1;
	//        else low = mid + 1;
	//    }
	//
	//    return -1;
	//}
	
	int _tmain(int argc, _TCHAR *argv[])
	{
	    SSTable S;
	    CreatSST(S,MAX);
	
	    for(int i = 1;i &lt;= S.length;i++)
	    {
	        printf("%d ",S.elem[i]);
	        if(i == S.length) printf("\n");
	    }
	
	    int key;
	    printf("Which number do you want to search?\n");
	    scanf("%d",&amp;key);
	
	    int location;
	//    location = binarySearch(S,key);        //循环二分查找
	    location = binarySearch(S,key,1,S.length);        //递归二分查找
	    char chs = getchar();
	    printf("The elem is S.elem[%d].\n",location);
	
	    char ch = getchar();
	   
	    return 0;
	}
</code></pre>
]]></content>
  </entry>
  
</feed>
